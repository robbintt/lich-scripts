=begin
  Documentation:
=end

# perc sigil repeatedly
# ^.*(induction\|abolition\|... sigil.*$
# convert to ruby regex syntax
#
# repeat perceive sigil improve whenever you run out of good options, measure your danger, sanity, resolve, focus as primary metricso
# Three attribute reductions: sanity destroying, focus disrupting, resolve taxing
#   - recovering your focus
#   - recovering your resolve
#
# losing x -> improving y:
# - sanity -> focus
# - sanity -> resolve
# - resolve -> focus
# - focus -> resolve
#
# trivial challenging
# focus disrupting, sanity destroying, 
# METHOD TASK PROCESS RITUAL EFFORT FORM TECHNIQUE APPROACH

# common, DRC: check if script is running thingy
# spellmonitor: watch spells
custom_require.call(%w[drinfomon common spellmonitor])

# original from hunting-buddy.lic
#custom_require.call(%w[common common-arcana common-items common-travel drinfomon events spellmonitor equipmanager])

class SigilHarvesting

  # from common: have only used one method from DRC so far, not sure what DRCA, DRCI, DRCT are...
  include DRC
  #include DRCA
  #include DRCI
  #include DRCT

  def initialize

    # need to use full name of spell
    @buffs = {'Shadows' => {'min' => 1, 'power' => 25},
              'Seer\'s Sense' => {'min' => 15, 'power' => 25}}

    # max amount to power spell from harness
    @max_spell_size = 20
    @charge_cambrinth = true

    # track if each camb is linked
    @worn_cambrinth = {'armband' => {'capacity' => 48, 'focused' => false, 'lines' => 0}}

    @active_spells = {}  # init for DRSpells.active_spells

    # what is all this, what can i use
    #arg_definitions = [[]]
    #args = parse_args(arg_definitions, true)
    #@settings = get_settings
    #@stop_on_low_threshold = @settings.stop_on_low_threshold
    #data = get_data('hunting')
    #@escort_zones = data.escort_zones
  end

  def worn_cambrinth
    @worn_cambrinth
  end
  def buffs
    @buffs
  end
  def max_spell_size
    @max_spell_size
  end
  def charge_cambrinth
    @charge_cambrinth
  end

  def nervestate
    if Wounds.nerves > 0
      echo "Wounds: #{Wounds.nerves}"
    else
      echo "No nerve wounds."
    end
  end

  def buff_spellstate(buff)
    active_spells = DRSpells.active_spells
    #echo "spell data: #{active_spells}"
    #echo "Buff '#{buff}' has #{active_spells[buff]} roisaen left."
    return active_spells[buff]
  end

  def cast_buff(spell, mana)
    # dead simple, no dependencies
    # if it doesnt work, the nanny tries again later
    put "prep #{spell} #{mana}"
    pause 16
    fput "cast", "You gesture.", "You"
    waitrt?
  end

  def cambstate(camb, attribs)
    # this doesn't handle cases where skill is not sufficient
    focus = fput "focus #{camb}", "You focus"
    waitrt?
    cambstate_string = matchtimeout 5, "the cambrinth #{camb}"
    lines = /You clearly perceive ([0-9]+) line/.match(cambstate_string)[1]
    # catch empty camb
    unless lines
      lines = 0
    end
    # set focused
    focused = false
    if /Your link to the/.match(cambstate_string)
      focused = true
    end

    # this is extra code, just set it above instead
    echo "Cambrinth has: #{lines} mana."
    @worn_cambrinth[camb]['lines'] = lines.to_i
    echo "Cambrinth is focused: #{focused}"
    @worn_cambrinth[camb]['focused'] = focused
  end

  def get_power_from_camb(camb, attribs, min_from_camb, max_from_camb, min_prep, spell_power)
    # determine the max power the cambrinth can provide
    # return spell_power - min_prep - max_from_camb
    # set max to camb capacity if necessary
    if attribs['capacity'] < max_from_camb
      max_from_camb = attribs['capacity']
    end
    # plenty of mana, no need to charge
    if attribs['lines'] >= max_from_camb
      return max_from_camb, 0
    # need to charge the camb, increase spell prep, or underpower the spell
    elsif attribs['lines'] < max_from_camb
      return max_from_camb, max_from_camb - attribs['lines']
    # not reachable
    else
      # add logging here to detect if it is reached
      return 0, 0
    end
  end

  def prep_camb(camb, target)
    # charge the camb up to target and invoke it

    # a little safety
    unless @worn_cambrinth[camb]
      echo "Cambrinth '#{camb}' not in @worn_cambrinth"
      return
    end
    lines = @worn_cambrinth[camb]['lines']
    if lines >= target
      fput "invoke #{camb} #{target}", "link"
      waitrt? # no roundtime if already linked
    elsif target > lines
      fput "charge #{camb} #{target-lines}", "You harness"
      waitrt?
      fput "invoke #{camb} #{target}", "link"
      waitrt? # no roundtime if already linked
    # not possible to hit this case
    else
      # TODO add logging that this happened
      fput "invoke #{camb} #{target}", "link"
      waitrt? # no roundtime if already linked
    end
  end
end

buffwatcher = BuffWatcher.new

buffwatcher.nervestate

=begin
buffwatcher.worn_cambrinth.each do |camb, attribs|
  buffwatcher.cambstate(camb, attribs)
end
=end

loop {
  # once i figure out how to compare it to something, pass the reset condition as a number - on a per-spell basis
  #   - 0 means reset only after spell wears off, 10 means reset when 10 roisaen left on spell, etc
  buffwatcher.buffs.each do |buff, attrs|
    # seek to maximize camb usage and minimize harness usage
    # but stay within bounds for each
    # have an option for using only existing camb charge
    buffstate = buffwatcher.buff_spellstate(buff)
    max_from_harness = buffwatcher.max_spell_size

    # establish bounds for the cambrinth min/max charge calculations
    min_prep = attrs['min']
    spell_power = attrs['power']
    max_prep = spell_power
    max_from_camb = spell_power - min_prep # does not yet reflect camb capacity

    if spell_power > max_from_harness
      # min_from_camb is minimum to ensure we hit spell power given max_from_harness
      min_from_camb = spell_power - max_from_harness
      # this gets recalculated after calculating max_from_camb
      max_prep = max_from_harness  # consume this partial value when casting
    else
      min_from_camb = 0
    end
    # how to choose which camb?
    camb = 'prism'

    # I have a half-baked idea about keeping my worn camb full with another script
    # this code first seeks to maximize from camb, then if the camb is undercharged
    # it seeks to pull more from the prep size until the max prep size
    # then it either charges the camb or casts undersized spells
    if !buffstate or buffstate < 5  # 5 minutes is hardcoded temporarily
      if min_from_camb > 0
        # does this instance @variable work because its in a function sig in the instance?
        buffwatcher.cambstate(camb, @worn_cambrinth[camb])
        # this gets the most possible from camb
        power_from_camb, amount_undercharged = buffwatcher.get_power_from_camb(camb, buffwatcher.worn_cambrinth[camb], min_from_camb, max_from_camb, min_prep, spell_power)

        # make up for the undercharged cambrinth if possible
        ideal_prep_size = min_prep + amount_undercharged
        # cap the prep at max prep
        if ideal_prep_size <= max_prep
          prep_size = ideal_prep_size
        else
          prep_size = max_prep
        end
        # this was in the path of error logging, add back later
        #prep_size = (ideal_prep_size <= max_prep) ? ideal_prep_size : max_prep

        # take less from camb if we compensated for uncharged camb with bigger prep
        if spell_power - prep_size < power_from_camb
          revised_max_power_from_camb = spell_power - prep_size
        else
          revised_max_power_from_camb = power_from_camb
        end
        #revised_max_power_from_camb = (spell_power - prep_size) < power_from_camb ? (spell_power - prep_size) : power_from_camb

        # calculate if there's a gap in the max values here
        prep_gap = spell_power - power_from_camb - prep_size

        # this option charges the camb up for full spell_power
        if @charge_cambrinth
          buffwatcher.prep_camb(camb, revised_max_power_from_camb + prep_gap)
        else
          # this avoids charging the camb for final spell_power=spell_power-prep_gap
          # it will still invoke the cambrinth
          buffwatcher.prep_camb(camb, revised_max_power_from_camb)
        end
      end
      buffwatcher.cast_buff(buff, prep_size)
    end

    pause 1
  end
}
